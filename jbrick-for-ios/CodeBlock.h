//
//  CodeBlock.h
//  jbrick-for-ios
//
//  Created by Student on 9/26/12.
//  Copyright (c) 2012 __MyCompanyName__. All rights reserved.
//

#import <Foundation/Foundation.h>
#import "PrimativeTypes.h"
#import "CodeBlockVisitor.h"

@protocol CodeBlockDelegate <NSObject>
@optional
- (void) blockWasDeleted:(NSObject *)sender;
- (void) blockChangedType:(NSObject *)sender;
- (void) blockMoved:(NSObject *)sender oldParent:(NSObject *)oldParent newParent:(NSObject *)newParent;
@end

/**
 * CodeBlock is the root object of all the blocks that make up a program. All concrete blocks
 * such as MethodCallCodeBlock inherit from this base class.
 *
 * This class is inteded to be an abstract class. This is why there are not any initialization
 * methods. the "abstract" methods will throw an exception if they are called directly
 * on this object and not a concrete class.
 */
@interface CodeBlock : NSObject <UIAlertViewDelegate, NSCoding>
{
    Boolean deleted;
    Primative returnType;
    CodeBlock *parent;
}
/** Defines what the return type of the CodeBlock is such as boolean or int */
@property Primative ReturnType;
/** A link to the CodeBlocks container block. The only block permitted to have a null Parent is the main block */
@property CodeBlock *Parent;
/** When a block is "Deleted" this property is marked true. the object can only be removed when all references are gone */
@property bool Deleted;
/** The Delegate is notified when the block is deleted and a few other actions */
@property id<CodeBlockDelegate> Delegate;

/**
 * This is the main function of everycode block. It is called to generate a given blocks source code. 
 * This will typically be called on the Main (root block) and be recursively called to the children.
 * @return Source generated by this block and it's children.
 */
- (NSString *) generateCode;

/**
 * The display name is used when presenting the block to the user.
 * @return Display name for the concrete block
 */
- (NSString *) getDisplayName;

/**
 * Add a code block as the last block in this parent block's children.
 * @param codeBlock to be added
 * @return true if the block was added succesfully
 */
- (bool) addCodeBlock:(CodeBlock *)codeBlock;

/**
 * Add a code block before or after another block in this parent block's children.
 * @param codeBlock to be added
 * @param indexBlock the block to add before or after
 * @param afterIndexblock add after the index block if true
 * @return true if the block was added succesfully
 */
- (bool) addCodeBlock:(CodeBlock *)codeBlock indexBlock:(CodeBlock *)indexBlock afterIndexBlock:(bool)afterIndexBlock;

/**
 * Can a code block be added in between the two other blocks?
 * @param afterBlock block to insert after
 * @param andBefore block to insert before
 * @return true if a block can be added to the given position
 */
- (bool) canAddCodeBlockAfter:(CodeBlock *)afterBlock andBefore:(CodeBlock *)beforeBlock;

/**
 * Call to remove a child block from it's parent.
 * @param codeBlock the child block to be removed.
 */
- (void) removeCodeBlock:(CodeBlock *)codeBlock;

/**
 * Remove this block from it's parent.
 */
- (void) removeFromParent;

/**
 * Search up the tree to get all variable references within the scope of this block.
 * @param type the return type to look for such as all int variables
 * @return all possible parameter options within this block's scope
 */
- (NSArray *) getAvailableParameters:(Primative)type;

/**
 * Add any variable references within this blocks children to the given array that
 * are before the specified index block.
 * @param type the return type to look for such as all int variables
 * @param paramList the list to add the references too
 * @param index child block to stop searching at, because children below the index block are out of scope
 */
- (void) addAvailableParameters:(Primative)type parameterList:(NSMutableArray *)paramList beforeIndex:(CodeBlock *)index;

/**
 * Check if the refernced parameter is declared above the given index block.
 * @param parameter the referenced block to check
 * @param beforeIndex does it come before this block?
 * @return true if the referenced block is in scope.
 */
- (bool) parameterIsInScope:(CodeBlock *)parameter beforeIndex:(CodeBlock *)index;

/**
 * Get a reference block to this block, not all block types support this operation and will return nil.
 * @param type the return type that is being requested
 * @return a reference code block if one can be created, nil otherwise
 */
- (CodeBlock *) getParameterReferenceBlock:(Primative)type;

/**
 * This method is an implimentation of the Visitor pattern, it is here to "add" methods in the future to
 * CodeBlock without the need to declare them in every concrete type.
 * @param visitor the visitor object to call the concrete objects visit method on
 */
- (void) acceptVisitor:(id<CodeBlockVisitor>)visitor;

/**
 * Called when a child block is requesting to change it's return type, this mainly happens with value blocks
 * and variable blocks.
 * @param child the child block attempting to change it's type
 * @param prevType what the type was
 * @param newType what the new type will be
 * @return true if the change is permitted
 */
- (Boolean) childRequestChangeType:(CodeBlock *)child prevType:(Primative)prevType newType:(Primative)newType;

/**
 * Called when a child or referenced block is deleted.
 * @param child the child block that has been deleted
 */
- (void) childWasDeleted:(CodeBlock *)child;

@end